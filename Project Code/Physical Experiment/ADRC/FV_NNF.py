import numpy as np

_X_MIN = np.array([[-0.16852222],  # x
                   [-0.25630937],  # y
                   [-0.36495686],  # z
                   [-0.07376822]]) # Fz
_X_MAX = np.array([[ 0.22838745],
                   [ 0.22673531],
                   [ 0.17573531],
                   [ 0.10304744]])
_Y_MIN = np.array([[-0.29987764],  # ΔV1
                   [-0.38567713],  # ΔV2
                   [-0.35217968]]) # ΔV3
_Y_MAX = np.array([[ 0.33208592],
                   [ 0.33432941],
                   [ 0.32210912]])

# --- Weights & Biases ---
W1 = np.array([
    [ 0.26269072,  0.46445247, -0.53264444,  1.08042783],
    [-1.34697601, -1.19887427,  0.13261831,  0.27925513],
    [ 0.49030206,  0.03643859, -0.27833008,  0.60898398],
    [ 1.05982982, -1.50915772, -0.28168144,  0.14909344],
    [-0.72114619,  0.22198348,  1.52333616,  0.21402942],
    [ 0.91993035,  1.09619514, -1.26221821, -0.78865501],
    [-0.10827781, -0.53713801,  1.33202931,  0.60345740],
    [ 0.06766773, -0.02913513,  0.42436002, -1.13330477],
    [-1.73270739,  0.72233189,  1.36568983, -0.52683504],
    [ 0.02425536, -0.26188050,  1.07578154,  0.85820432],
    [ 0.84761762, -0.66019731, -1.40722217,  0.16256993],
    [ 0.01677921,  0.27859593,  0.32015874, -0.31510111],
    [ 0.13469865, -0.12067406,  0.06161456, -0.34091541],
    [-0.24748736,  0.10487167, -0.67838697,  0.50331906],
    [ 0.10510786, -0.00344412, -1.17609744,  1.12029539],
    [-0.41827412, -1.11614304,  0.49834757, -0.26399453],
    [ 0.17431294,  1.11313209, -0.70225442,  0.66978134],
    [-0.51644391,  1.29194293, -0.80377246,  0.71882897],
    [ 0.23574128,  1.14365481, -1.43175894, -0.56334027],
    [ 0.35262769,  0.65402131,  0.70424456,  0.34081356],
    [ 0.43209921,  0.72504237,  0.60365345,  1.04840209],
    [ 0.23774011,  0.25209108, -1.02284550, -0.27912037],
    [-0.10516807, -0.42825001, -0.72316332, -1.18540613],
    [ 0.12060304,  0.46249551,  1.52350916,  0.18907909],
    [ 0.29221854,  0.39854385,  0.03851379,  0.56075639],
    [ 0.30709438, -0.53773087,  0.01863432,  0.61638714],
    [ 0.17653641,  0.02914368, -0.08195273, -0.24787722],
    [ 0.32321389, -0.68123609,  0.67179603,  0.10083919],
    [ 0.62242909, -0.63616945, -0.78544249, -0.12817790],
    [-0.31743817, -0.25232981, -0.38231545, -0.29218503],
    [-0.41145671,  0.40896040,  0.36689233,  0.01495038],
    [ 0.32535244,  0.17193884, -0.26737828, -0.24833459]
], dtype=np.float64)

b1 = np.array([
    [ 0.36362495], [-0.14444860], [ 0.27093034], [ 0.07474604], [ 0.02605463],
    [ 0.27059938], [ 0.30780463], [-0.30484282], [ 0.01915438], [-0.08103609],
    [-0.04992127], [ 0.08811666], [ 0.08648710], [ 0.04979929], [ 0.20801817],
    [-0.14099867], [-0.02794007], [ 0.28605927], [-0.20999944], [ 0.04647434],
    [-0.26750368], [ 0.10006185], [ 0.07696854], [-0.05605482], [-0.06782908],
    [-0.01957488], [ 0.06964219], [ 0.12207747], [-0.05626125], [ 0.13884701],
    [ 0.02374757], [-0.07427344]
], dtype=np.float64)

W2 = np.array([
    [ 0.06736861,  0.19883868, -0.21680365, -0.25131661,  0.07108194, -0.16302382,
     -0.19382886, -0.07074833, -0.01531473, -0.10972561, -0.00878903, -0.01887867,
      0.07383789,  0.04754346,  0.15556164, -0.02626099,  0.18464628,  0.01802453,
     -0.14847922, -0.11996023, -0.00106443,  0.16314092, -0.06236566,  0.01479388,
      0.00885154,  0.12791741, -0.17824233, -0.04190074, -0.05638691, -0.00492224,
      0.12791562,  0.05744052],
    [ 0.02882227, -0.11713415,  0.08373090, -0.12031442, -0.01206764,  0.01169026,
      0.02067260,  0.06614920,  0.03619350,  0.08840953, -0.00551841, -0.08666459,
     -0.06827213, -0.05483953,  0.11442717,  0.02766947, -0.00622720, -0.03555327,
      0.06727757, -0.14438741, -0.12937335, -0.01434044,  0.02628819, -0.11016013,
     -0.00693614,  0.05785295, -0.13823062,  0.12416047, -0.03608816, -0.12840450,
     -0.08110460, -0.07569070],
    [-0.12046499, -0.10396031,  0.02286309,  0.10927299, -0.13498616,  0.03472111,
      0.03567510,  0.02904002, -0.12228735,  0.01028481, -0.01592863,  0.07265583,
     -0.02614890,  0.02249961, -0.11081835,  0.02464042, -0.07287256,  0.09656985,
     -0.10599836, -0.03192144,  0.06637052,  0.01881363,  0.07971338, -0.09341038,
     -0.13215412, -0.13057347,  0.07649541, -0.02512120, -0.04859720,  0.01532147,
     -0.01411891, -0.05276994]
], dtype=np.float64)

b2 = np.array([[-0.07038820],
               [-0.04556411],
               [ 0.04590498]], dtype=np.float64)


_EPS = 1e-12
_X_SCALE = _X_MAX - _X_MIN
_Y_SCALE = _Y_MAX - _Y_MIN
_X_SCALE[_X_SCALE < _EPS] = _EPS
_Y_SCALE[_Y_SCALE < _EPS] = _EPS


def _to_4xN(X):
    X = np.asarray(X, dtype=np.float64)
    if X.ndim == 1:
        X = X.reshape(-1, 1)
    if X.shape[0] == 4:
        pass
    elif X.shape[1] == 4:
        X = X.T
    else:
        raise ValueError(f"Expect shape (4,N) or (N,4), got {X.shape}.")
    X = np.nan_to_num(X, copy=False)
    return X


def Fz_deltaV_NNF(X, clip_inputs=False, clip_outputs=False):
    X = _to_4xN(X)

    if clip_inputs:
        X = np.minimum(np.maximum(X, _X_MIN), _X_MAX)
    Xn = (X - _X_MIN) / _X_SCALE

    a1 = np.tanh(W1 @ Xn + b1)     # (32,N)
    z2 = W2 @ a1 + b2              # (3,N)

    Yn = z2
    Y = Yn * _Y_SCALE + _Y_MIN

    if clip_outputs:
        Y = np.minimum(np.maximum(Y, _Y_MIN), _Y_MAX)

    return Y


# ------------------- quick self-test -------------------
if __name__ == "__main__":
    x = np.array([0.0, 0.0, 0.5, 0.01])  # (4,)
    y = Fz_deltaV_NNF(x)
    print("delta_v1, delta_v2, delta_v3 (single):\n", y)

    X_batch = np.array([[0.0,  0.02, -0.05, 0.01],
                        [0.0, -0.01,  0.03, 0.00],
                        [0.5,  0.10, -0.10, 0.02],
                        [0.01, 0.02,  0.01, 0.00]]).T  # (4,3)
    Y = Fz_deltaV_NNF(X_batch, clip_inputs=True)
    print("batch outputs shape:", Y.shape)

